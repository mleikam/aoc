const { getMagnitude, 
	findLargeNumber, 
	replaceNumber,
	explodeNumber, 
	findNestedPair,
	main
 } = require('./solve.js')

const test = (a,b) => {
	const sa = JSON.stringify(a);
	const sb = JSON.stringify(b)
	const same =  sa === sb;
	if(!same) console.log(`! failed for a:${sa}; b:${sb};`)
	else { console.log('+ pass',sa,sb)}
}

// test(getMagnitude([9,1]),29)
// test(getMagnitude([1,9]),21)
// test(getMagnitude([[9,1],[1,9]]),129)
// test(getMagnitude('[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]'),4140)
// test(getMagnitude('[[1,2],[[3,4],5]]'),143)
// test(getMagnitude('[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'),1384)
// test(getMagnitude('[[[[1,1],[2,2]],[3,3]],[4,4]]'),445)
// test(getMagnitude('[[[[3,0],[5,3]],[4,4]],[5,5]]'),791)
// test(getMagnitude('[[[[5,0],[7,4]],[5,5]],[6,6]]'),1137)
// test(getMagnitude('[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]'),3488)
// test(getMagnitude('[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]'),4140)
// test(getMagnitude('[[[[7,8],[6,6]],[[6,0],[7,7]]],[[[7,8],[8,8]],[[7,9],[0,6]]]]'),3993)

// test(findLargeNumber('|3|10|11|5',10).index,3)
// test(findLargeNumber('|3|1|2|5',10),null)

// test(replaceNumber({0:'45',index:6},'1|2|3|45|5'),'1|2|3|[22,23]|5')
// test(replaceNumber(null,'1|2|3|45|5'),'1|2|3|45|5')

// exploding

const e1a = '[[[[[9,8],1],2],3],4]'
const e1b = '[[[[0,9],2],3],4]'
const e2a = '[7,[6,[5,[4,[3,2]]]]]'
const e2b = '[7,[6,[5,[7,0]]]]'
const e3a = '[[6,[5,[4,[3,2]]]],1]'
const e3b = '[[6,[5,[7,0]]],3]'
const e4a = '[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]'
const e4b = '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]'
const e5a = '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]'
const e5b = '[[3,[2,[8,0]]],[9,[5,[7,0]]]]'
const e6a = '[[1,9],[9,1]]'; // not nested
const e6b = '[[1,9],[9,1]]'
const e7a = '[7,[6,[[1,8],[4,[3,2]]]]]'
//           012345678901234567890123456789
const e7b = '[7,[6,[[1,8],[7,0]]]]'

const e8a = '[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'
const e8b = '[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'

const e9a = '[[[[12,12],[6,14]],[[15,0],[17,[8,1]]]],[2,9]]'
const e9b = '[[[[12,12],[6,14]],[[15,0],[25,0]]],[3,9]]'

test(findNestedPair(e1a),[4,['a9,8z','9','8']])
test(findNestedPair(e2a),[12,['a3,2z','3','2']])
test(findNestedPair(e6a),[-1,null])
test(findNestedPair(e7a),[16,['a3,2z','3','2']])
test(findNestedPair(e8a),[18,['a4,5z','4','5']])

// test(explodeNumber(findNestedPair(e1a),e1a),e1b)
// test(explodeNumber(findNestedPair(e2a),e2a),e2b)
// test(explodeNumber(findNestedPair(e3a),e3a),e3b)
// test(explodeNumber(findNestedPair(e4a),e4a),e4b)
// test(explodeNumber(findNestedPair(e5a),e5a),e5b)
// test(explodeNumber(findNestedPair(e6a),e6a),e6b)
// test(explodeNumber(findNestedPair(e7a),e7a),e7b)
// test(explodeNumber(findNestedPair(e8a),e8a),e8b)
// test(explodeNumber(findNestedPair(e9a),e9a),e9b)

// test(main(`[1,1]
// [2,2]
// [3,3]
// [4,4]`),'[[[[1,1],[2,2]],[3,3]],[4,4]]')

// test(main(`[1,1]
// [2,2]
// [3,3]
// [4,4]
// [5,5]`),'[[[[3,0],[5,3]],[4,4]],[5,5]]')

// test(main(`[1,1]
// [2,2]
// [3,3]
// [4,4]
// [5,5]
// [6,6]`),'[[[[5,0],[7,4]],[5,5]],[6,6]]')


// test(main(`[[[[4,3],4],4],[7,[[8,4],9]]]
// [1,1]`),'[[[[0,7],4],[[7,8],[6,0]]],[8,1]]')

// test(main(`[[[[4,3],4],4],[7,[[8,4],99]]]
// [1,1]`),'[[[[7,6],[7,7]],[[7,7],[7,7]]],[[[7,7],[7,0]],[[8,8],[8,7]]]]')

// test(main(`[[[[[8,4],99],1],2],3]
// [1,1]`),'[[[[7,7],[7,7]],[[8,0],[9,9]]],[[6,6],1]]')

// test(main(`[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
// [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
// [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
// [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
// [7,[5,[[3,8],[1,4]]]]
// [[2,[2,2]],[8,[8,1]]]
// [2,9]
// [1,[[[9,3],9],[[9,0],[0,7]]]]
// [[[5,[7,4]],7],1]
// [[[[4,2],2],6],[8,7]]`),'[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]')

// // step by step
// test(main(`[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
// [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]`), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]')

// test(main(`[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]
// [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]`),'[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]');

// test(main(`  [[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]
// [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
// `),'[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]');

// test(main(`  [[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]
// [7,[5,[[3,8],[1,4]]]]
// `),'[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]');
// test(main(`
//   [[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]
//  [[2,[2,2]],[8,[8,1]]]
// `),'[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]');

// test(main(`
//   [[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]
// [2,9]
// `),'[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]');

// test(main(`
//   [[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]
// [1,[[[9,3],9],[[9,0],[0,7]]]]
// `),'[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]');

// test(main(`
//   [[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]
// [[[5,[7,4]],7],1]
// `),'[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]');

// test(main(`
//   [[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]
// [[[[4,2],2],6],[8,7]]
// `),'[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]');

// test(main(`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
// [[[5,[2,8]],4],[5,[[9,9],0]]]
// [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
// [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
// [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
// [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
// [[[[5,4],[7,7]],8],[[8,3],8]]
// [[9,3],[[9,9],[6,[4,9]]]]
// [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
// [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`),'[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]')

